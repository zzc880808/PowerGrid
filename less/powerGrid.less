@grid-columns: 12;		/* Total column count */
@grid-gap: 20px;		/* The gap width */

.power-grid {
	.fn-pg-general();
	.fn-clearfix();
}

.fn-make-pg-row();

.fn-make-pg-cols(s1);

.fn-make-pg-offs(s1);

.pg-col-inner {
	margin-left: (@grid-gap / 2);
	margin-right: (@grid-gap / 2);
	min-height: 1px;
	.fn-pg-general();
}

.fn-make-pg-row () {
	.pg-row {
		margin: (@grid-gap / 2) (@grid-gap / -2);
		.fn-pg-general();
		.fn-clearfix();
	}
}

.fn-make-pg-cols (@type) {
	.fn-make-pg-cols(@grid-columns, @type, l);
	.fn-make-pg-cols(@grid-columns, @type, r);
}

.fn-make-pg-cols (@count, @type, @style) when (@count > 0) {
	.fn-make-pg-col (@count, @type, @style);
	.fn-make-pg-cols (@count - 1, @type, @style);
}

.fn-make-pg-col (@count, @type, @style) when (@count > 0) {
	.pg-col-@{type}-@{style}@{count} {
		width: percentage(@count / @grid-columns);
		.fn-pg-general();
		.fn-make-pg-col-float(@style);
	}
}

.fn-make-pg-col-float (@style) when (@style = l) { float: left; }
.fn-make-pg-col-float (@style) when (@style = r) { float: right; }

.fn-make-pg-offs (@type) {
	.fn-make-pg-offs(@grid-columns, @type, l);
	.fn-make-pg-offs(@grid-columns, @type, r);
}

.fn-make-pg-offs (@count, @type, @style) when (@count > 0) {
	.fn-make-pg-off (@count, @type, @style);
	.fn-make-pg-offs (@count - 1, @type, @style);
}

.fn-make-pg-off (@count, @type, @style) when (@count > 0) and (@style = l) {
	.pg-off-@{type}-@{style}@{count} {
		left: percentage(@count / @grid-columns);
	}
}

.fn-make-pg-off (@count, @type, @style) when (@count > 0) and (@style = r) {
	.pg-off-@{type}-@{style}@{count} {
		right: percentage(@count / @grid-columns);
	}
}

.fn-pg-general () {
	position: relative;
	display: block;
	overflow: hidden;
}

.fn-clearfix () {
	*zoom: 1;
	&:before, &:after {
		content: ".";
		display: block;
		clear: both;
		visibility: hidden;
		line-height: 0;
		height: 0;
		font-size: 0;
	}
}

