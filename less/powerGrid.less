@grid-float-direction: left;

@grid-columns: 12; // Total column count
@grid-gap: 20px; // The gap width
@grid-level: 3; // The cols' type count

@grid-s1-width: 0px;
@grid-s2-width: 768px;
@grid-s3-width: 960px;


.pg-grid {
	.fn-pg-general();
}

.pg-grid-resp {
	margin-left: auto;
	margin-right: auto;
	.fn-pg-general();
}

.fn-make-pg-grid-resp();

.fn-make-pg-row();

.fn-make-pg-items();

.pg-col-inner {
	margin-left: (@grid-gap / 2);
	margin-right: (@grid-gap / 2);
	.fn-pg-general();
}

.fn-make-pg-grid-resp (@level: 1) when (@level = 1) {
	@widthVar: "grid-s@{level}-width";
	@media (min-width: @@widthVar) {
		.pg-grid-resp { width: 100%; }
	}
	.fn-make-pg-grid-resp (@level + 1);
}

.fn-make-pg-grid-resp (@level) when (@level > 1) and (@level <= @grid-level) {
	@widthVar: "grid-s@{level}-width";
	@media (min-width: @@widthVar) {
		.pg-grid-resp { width: @@widthVar; }
	}
	.fn-make-pg-grid-resp (@level + 1);
}

.fn-make-pg-row () {
	.pg-row {
		margin-left: @grid-gap / -2;
		margin-right: @grid-gap / -2;
		.fn-pg-general();
		.fn-clearfix();
	}
}

.fn-make-pg-items (@level: 1) when (@level <= @grid-level) {
	@widthVar: "grid-s@{level}-width";
	@media (min-width: @@widthVar) {
		.fn-make-pg-cols(@grid-columns, @level);
		.fn-make-pg-offs(@grid-columns, @level);
		.fn-make-visibility(@level);
	}
	.fn-make-pg-items(@level + 1);
}

// Make visibility
.fn-make-visibility (@level) {
	.pg-show-s@{level} { display:block; }
	.pg-hide-s@{level} { display:none; }
}

// Make columes
.fn-make-pg-cols (@count, @level) when (@count > 0) {
	.fn-make-pg-col(@count, @level);
	.fn-make-pg-cols(@count - 1, @level);
}
.fn-make-pg-col (@count, @level) {
	.pg-col-s@{level}-@{count} {
		width: percentage(@count / @grid-columns);
		float: @grid-float-direction;
		.fn-pg-general();
	}
}

// Make offsets
.fn-make-pg-offs (@count, @level) when (@count > 0) {
	.fn-make-pg-off (@count, @level, @grid-float-direction);
	.fn-make-pg-offs (@count - 1, @level);
}
.fn-make-pg-off (@count, @level, left) {
	.pg-off-s@{level}-@{count} {
		margin-left: percentage(@count / @grid-columns);
	}
}
.fn-make-pg-off (@count, @level, right) {
	.pg-off-s@{level}-@{count} {
		margin-right: percentage(@count / @grid-columns);
	}
}

.fn-pg-general () {
	position: relative;
	display: block;
	overflow: hidden;
}

.fn-clearfix () {
	*zoom: 1;
	&:before, &:after {
		content: ".";
		display: block;
		clear: both;
		visibility: hidden;
		height: 0;
		font-size: 0;
		line-height: 0;
	}
}

