@grid-columns: 12; /* Total column count */
@grid-gap: 20px; /* The gap width */
@grid-level: 1; /* The cols' type count */
@grid-float-direction: left;

.power-grid {
	.fn-pg-general();
	.fn-clearfix();
}

.fn-make-pg-row();

.fn-make-pg-items();

.fn-make-col-pull();

.pg-col-inner {
	margin-left: (@grid-gap / 2);
	margin-right: (@grid-gap / 2);
	min-height: 1px;
	.fn-pg-general();
}

.fn-make-pg-row () {
	.pg-row {
		margin: 0 (@grid-gap / -2);
		.fn-pg-general();
		.fn-clearfix();
	}
}

.fn-make-pg-items (@level: @grid-level) when (@level > 0) {
	.fn-make-pg-cols(@grid-columns, @level);
	.fn-make-pg-offs(@grid-columns, @level, l);
	.fn-make-pg-offs(@grid-columns, @level, r);
	.fn-make-pg-items(@level - 1);
}

/* Make columes */
.fn-make-pg-cols (@count, @level) when (@count > 0) {
	.fn-make-pg-col(@count, @level);
	.fn-make-pg-cols(@count - 1, @level);
}
.fn-make-pg-col (@count, @level) {
	.pg-col-s@{level}-@{count} {
		width: percentage(@count / @grid-columns);
		float: @grid-float-direction;
		.fn-pg-general();
	}
}

/* Make offsets */
.fn-make-pg-offs (@count, @level, @style) when (@count > 0) {
	.fn-make-pg-off (@count, @level, @style);
	.fn-make-pg-offs (@count - 1, @level, @style);
}
.fn-make-pg-off (@count, @level, l) {
	.pg-off-s@{level}-l@{count} {
		left: percentage(@count / @grid-columns);
	}
}
.fn-make-pg-off (@count, @level, r) {
	.pg-off-s@{level}-r@{count} {
		right: percentage(@count / @grid-columns);
	}
}

.fn-make-col-pull () when (@grid-float-direction = left) {
	.pg-col-pull { float: right; }
}
.fn-make-col-pull () when (@grid-float-direction = right) {
	.pg-col-pull { float: left; }
}

.fn-pg-general () {
	position: relative;
	display: block;
	overflow: hidden;
}

.fn-clearfix () {
	*zoom: 1;
	&:before, &:after {
		content: ".";
		display: block;
		clear: both;
		visibility: hidden;
		height: 0;
		font-size: 0;
		line-height: 0;
	}
}

